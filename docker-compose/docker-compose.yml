version: '2.1'

services:
  postgres:
    image: postgres:16
    ports:
      - "5432:5432"
    volumes:
      - ./sql:/docker-entrypoint-initdb.d/
    healthcheck:
      test: [ "CMD", "pg_isready", "-q", "-d", "kogito", "-U", "kogito-user" ]
      timeout: 45s
      interval: 10s
      retries: 50
#    network_mode: host
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres


  pulsar:
    image: apachepulsar/pulsar:3.2.1
    command: bin/pulsar standalone
    ports:
      - 6650:6650
      - 8333:8080

  zookeeper:
    container_name: zookeeper
    image: strimzi/kafka:0.20.1-kafka-2.6.0
    command: [
      "sh", "-c",
      "bin/zookeeper-server-start.sh config/zookeeper.properties"
    ]
    ports:
      - "2181:2181"
    environment:
      LOG_DIR: "/tmp/logs"

  kafka:
    image: strimzi/kafka:0.20.1-kafka-2.6.0
    container_name: kafka
    command: [
      "sh", "-c",
      "bin/kafka-server-start.sh config/server.properties --override inter.broker.listener.name=$${KAFKA_INTER_BROKER_LISTENER_NAME} --override listener.security.protocol.map=$${KAFKA_LISTENER_SECURITY_PROTOCOL_MAP} --override listeners=$${KAFKA_LISTENERS} --override advertised.listeners=$${KAFKA_ADVERTISED_LISTENERS} --override zookeeper.connect=$${KAFKA_ZOOKEEPER_CONNECT}"
    ]
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 0
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: INTERNAL://kafka:29092,EXTERNAL://kafka:9092
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:29092,EXTERNAL://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      LOG_DIR: "/tmp/logs"

  keycloak:
    image: 187429986583.dkr.ecr.us-east-1.amazonaws.com/din-global/keycloak-extensions:gitcommit-b164363f4f3a7a0caaab90e6cdfd7ce1dda796c2
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgres/keycloak
      KC_DB_USERNAME: postgres
      KC_DB_PASSWORD: postgres
      KC_DB_SCHEMA: public
      KEYCLOAK_IMPORT: /tmp/kogito-realm.json
      KC_HEALTH_ENABLED: true
#      KC_HTTP_ENABLED: true
#      JAVA_OPTS_APPEND: "-Djgroups.dns.query=keycloak-extensions-service-headless.keycloak.svc.cluster.local"
#      KC_HOSTNAME: "http://localhost:8480"
#      KC_HOSTNAME_ADMIN: "http://localhost:8480"
#      KC_HOSTNAME_BACKCHANNEL_DYNAMIC: true
#      KC_HOSTNAME_DEBUG: true
#      KC_PROXY_HEADERS: xforwarded
    ports:
      - "8480:8080"
      - "9000:9000"
    command: --spi-login-protocol-openid-connect-legacy-logout-redirect-uri=true start-dev
    depends_on:
      postgres:
        condition: service_healthy


  data-index:
    container_name: data-index
    image: quay.io/kiegroup/kogito-data-index-postgresql:1.44.1
    ports:
      - "8180:8080"
    environment:
      QUARKUS_DATASOURCE_JDBC_URL: "jdbc:postgresql://postgres:5432/dataindex"
      QUARKUS_DATASOURCE_USERNAME: kogito-user
      QUARKUS_DATASOURCE_PASSWORD: kogito-pass
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      QUARKUS_HTTP_CORS_ORIGINS: "/.*/"
#      KOGITO_DATA_INDEX_PROPS: -Dquarkus.hibernate-orm.database.generation=update -Dquarkus.profile=keycloak,kafka-events-support
#      SCRIPT_DEBUG: false

      QUARKUS_LOG.CONSOLE.LEVEL: TRACE
      QUARKUS_LOG_CATEGORY_ORG_KIE_KOGITO_LEVEL: TRACE
      QUARKUS_LOG_CATEGORY_IO_VERTX_LEVEL: TRACE
      QUARKUS_LOG_CATEGORY_IO_VERTX_MIN_LEVEL: TRACE
      QUARKUS_LOG_CATEGORY_GRAPHQL_LEVEL: TRACE
      QUARKUS_LOG_CATEGORY_ORG_APACHE_KAFKA_LEVEL: TRACE

      QUARKUS_LOG_CONSOLE_ENABLE: true
      QUARKUS_LOG_CONSOLE_LEVEL: TRACE
      QUARKUS_LOG_LEVEL: TRACE
      QUARKUS_LOG_MIN_LEVEL: TRACE
      QUARKUS_LOG_CATEGORY_ORG_KIE_KOGITO_INDEX_LEVEL: TRACE
      QUARKUS_LOG_CATEGORY_ORG_KIE_KOGITO_INDEX_MIN_LEVEL: TRACE

      KOGITO_DATA_INDEX_QUARKUS_PROFILE: kafka-events-support

      quarkus.oidc.enabled: false
      quarkus.oidc.tenant-enabled: false
      quarkus.oidc.auth-server-url: http://localhost:8480/realms/kogito
      quarkus.oidc.client-id: kogito-service
      quarkus.oidc.credentials.secret: secret
      quarkus.oidc.application-type: service

      quarkus.oidc.web-app-tenant.auth-server-url: http://localhost:8480/realms/kogito
      quarkus.oidc.web-app-tenant.client-id: kogito-service
      quarkus.oidc.web-app-tenant.credentials.secret: secret
      quarkus.oidc.web-app-tenant.application-type: web-app

      quarkus.http.cors: true
      quarkus.hibernate-orm.database.generation: update

  management-console:
    container_name: management-console
    image: quay.io/kiegroup/kogito-management-console:latest
    ports:
      - "8280:8080"
#    depends_on:
#      data-index:
#        condition: service_started
#      keycloak:
#        condition: service_healthy
    volumes:
      - ./svg/:/home/kogito/data/svg/
    environment:
      QUARKUS_LOG_LEVEL: TRACE
      QUARKUS_HTTP_CORS_ORIGINS: "/.*/"
      KOGITO_DATAINDEX_HTTP_URL: http://localhost:8180/graphql
      QUARKUS_HTTP_CORS: true
      QUARKUS_LOG_CONSOLE_ENABLE: true
      QUARKUS_LOG_CONSOLE_LEVEL: TRACE
      QUARKUS_LOG_CATEGORY_ORG_KIE_KOGITO_INDEX_LEVEL: TRACE
      QUARKUS_LOG_CATEGORY_ORG_KIE_KOGITO_INDEX_MIN_LEVEL: TRACE
      KOGITO_CONSOLES_KEYCLOAK_CONFIG_REALM: kogito
      KOGITO_CONSOLES_KEYCLOAK_CONFIG_URL: http://localhost:8480
      KOGITO_CONSOLES_KEYCLOAK_CONFIG_CLIENT_ID: kogito-console-quarkus
      KOGITO_CONSOLES_KEYCLOAK_CONFIG_HEALTH_CHECK_URL: http://localhost:8480/realms/kogito/.well-known/openid-configuration
      KOGITO_CONSOLES_KEYCLOAK_CONFIG_DISABLE_HEALTH_CHECK: "false"
      KOGITO_CONSOLES_KEYCLOAK_CONFIG_UPDATE_TOKEN_VALIDITY: "30"
#      KOGITO_DATAINDEX_HTTP_URL: http://${DOCKER_GATEWAY_HOST:-host.docker.internal}:8081/graphql
#      QUARKUS_HTTP_CORS_ORIGINS: "/.*/"
#      KOGITO_MANAGEMENT_CONSOLE_PROPS: -Dkogito.consoles.keycloak.config.url=http://localhost:8480
#        -Dkogito.consoles.keycloak.config.health-check-url=http://localhost:8480/realms/kogito/.well-known/openid-configuration

  task-console:
    container_name: task-console
    image: quay.io/kiegroup/kogito-task-console:1.44
    ports:
      - 8380:8080
    environment:
      QUARKUS_LOG_LEVEL: TRACE
      QUARKUS_HTTP_CORS_ORIGINS: "/.*/"
      KOGITO_DATAINDEX_HTTP_URL: http://localhost:8185/graphql
      QUARKUS_HTTP_CORS: true
      QUARKUS_LOG_CONSOLE_ENABLE: true
      QUARKUS_LOG_CONSOLE_LEVEL: TRACE
      QUARKUS_LOG_CATEGORY_ORG_KIE_KOGITO_INDEX_LEVEL: TRACE
      QUARKUS_LOG_CATEGORY_ORG_KIE_KOGITO_INDEX_MIN_LEVEL: TRACE
      KOGITO_CONSOLES_KEYCLOAK_CONFIG_REALM: kogito
      KOGITO_CONSOLES_KEYCLOAK_CONFIG_URL: http://localhost:8480
      KOGITO_CONSOLES_KEYCLOAK_CONFIG_CLIENT_ID: kogito-console-quarkus
      KOGITO_CONSOLES_KEYCLOAK_CONFIG_HEALTH_CHECK_URL: http://localhost:8480/realms/kogito/.well-known/openid-configuration
      KOGITO_CONSOLES_KEYCLOAK_CONFIG_DISABLE_HEALTH_CHECK: "false"
      KOGITO_CONSOLES_KEYCLOAK_CONFIG_UPDATE_TOKEN_VALIDITY: "30"
#      QUARKUS_LOG_LEVEL: DEBUG
#      KOGITO_DATAINDEX_HTTP_URL: http://${DOCKER_GATEWAY_HOST:-host.docker.internal}:8180/graphql
#      QUARKUS_HTTP_CORS_ORIGINS: "/.*/"
#      KOGITO_TASK_CONSOLE_PROPS: -Dkogito.consoles.keycloak.config.url=http://localhost:8480
#        -Dkogito.consoles.keycloak.config.health-check-url=http://localhost:8480/realms/kogito/.well-known/openid-configuration

  vault:
    image: hashicorp/vault:1.15
    environment:
      VAULT_DEV_ROOT_TOKEN_ID: test-root-token
      VAULT_ADDR: http://127.0.0.1:8200
    ports:
      - 8200:8200
    cap_add:
      - IPC_LOCK

  encryption:
    image: 187429986583.dkr.ecr.us-east-1.amazonaws.com/din-global/encryption:latest
    ports:
      - 1011:9090
    environment:
      spring_datasource_url: 'jdbc:postgresql://postgres:5432/workflow'
      spring_datasource_username: postgres
      spring_datasource_password: postgres
      spring_liquibase_url: 'jdbc:postgresql://postgres:5432/workflow'
      spring_liquibase_user: postgres
      spring_liquibase_password: postgres
      grpc_auth_jwt_active: false
      ENCRYPTION_PROVIDERS_0_TYPE: vault
      ENCRYPTION_PROVIDERS_0_TOKEN: test-root-token
      ENCRYPTION_PROVIDERS_0_URI: "http://vault:8200"
      encryption_cmm_cache_max-age: 1
      encryption_cmm_cache_message-use-limit: 1
      management_otlp_metrics_export_enabled: false
      management_tracing_enabled: false
      SPRING_DATA_REDIS_HOST: redis
      GRPC_AUTH_JWT_REALMS_INTERNAL-SERVICES_ISSUER-URI: "http://localhost:8480/realms/internal-services"
      GRPC_AUTH_JWT_REALMS_INTERNAL-SERVICES_JWK-URI: "http://localhost:8480/realms/internal-services/protocol/openid-connect/certs"
    depends_on:
      - postgres
      - vault

  opa:
    image: openpolicyagent/opa:latest-debug
    command: run --ignore='.*' --server /policies --log-level debug
    volumes:
      - /Users/zawar/Modules/cust-opa/service-authz-policies:/policies  # todo: adjust path
    ports:
      - 8181:8181


  redis:
    image: 'redis:7.0.5'
    ports:
      - 6379:6379
    environment:
      - ALLOW_EMPTY_PASSWORD=yes

  prompt:
    image: 187429986583.dkr.ecr.us-east-1.amazonaws.com/din-global/prompt:latest
    ports:
      - 1010:9090
    environment:
      spring_datasource_url: "jdbc:postgresql://postgres:5432/workflow"
      spring_datasource_username: postgres
      spring_datasource_password: postgres
      spring_liquibase_url: "jdbc:postgresql://postgres:5432/workflow"
      spring_liquibase_user: postgres
      spring_liquibase_password: postgres
      grpc_auth_jwt_active: "false"
    depends_on:
      - postgres

#  customer:
#    image: dg/customer
#    build: .
#    ports:
#      - 9095:9090
#    environment:
#      spring_datasource_url: 'jdbc:postgresql://postgres:5432/workflow'
#      spring_datasource_username: postgres
#      spring_datasource_password: postgres
#      spring_liquibase_url: 'jdbc:postgresql://postgres:5432/workflow'
#      spring_liquibase_user: postgres
#      spring_liquibase_password: postgres
#      datasource_fdw_user: postgres
#      datasource_analytics_user: postgres
#      grpc_client_encryptionService_address: 'static://encryption:9090'  # update according to encryption service
#      grpc_client_promptService_address: 'static://prompt:9090'  # update according to prompts service
#      spring_data_redis_host: redis
#      logging_level_root: debug
#    depends_on: # also requires encryption, document, and prompt service to function
#      postgres:
#        condition: service_started
#      redis:
#        condition: service_started

#  runtime:
#    image: run-spi:8.0
#    ports:
#      - 8085:8080
#    environment:
#      spring_datasource_url: "jdbc:postgresql://postgres:5432/workflow"
#      spring_datasource_username: postgres
#      spring_datasource_password: postgres
#      spring_liquibase_url: "jdbc:postgresql://postgres:5432/workflow"
#      spring_liquibase_user: postgres
#      spring_liquibase_password: postgres
#      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
#      global_din_workflow_generic-task_addresses_customer: host.docker.internal:9090
#      kogito_service_url: http://runtime:8080
#      kogito_dataindex_http_url: http://data-index:8080
#      DIN_AUTH_JWT_REALMS_INTERNAL-TOOLS_ISSUER-URI: http://${DOCKER_GATEWAY_HOST:-host.docker.internal}:8480/realms/kogito
#
#  data-proxy:
#    image: proxy:78.0
#    ports:
#    - 8081:8080
#    environment:
#      DATA_INDEX_URL: http://host.docker.internal:8180/graphql
#      SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_JWK-SET-URI: https://idp.dbank.engineering/realms/kogito/protocol/openid-connect/certs
#      LOGGING_LEVEL_ROOT: DEBUG
#      grpc_client_encryptionService_address: http://host.docker.internal:1011
#      GRPC_AUTH_JWT_CLIENT_ACTIVE: true
#      GRPC_AUTH_JWT_CLIENT_TOKEN-URI: "http://localhost:8480/realms/internal-services/protocol/openid-connect/token"
#      DIN_AUTH_JWT_CLIENT_ACTIVE: true
#      DIN_AUTH_JWT_CLIENT_TOKEN-URI: "http://localhost:8480/realms/internal-services/protocol/openid-connect/token"
#      GRPC_AUTH_JWT_CLIENT_ID: "7E13BB47-81F1-4479-8421-772E5F7802D2"
#      GRPC_AUTH_JWT_CLIENT_SECRET: "UlxnOPShVK2l6ovQ5mumTgihTk3DjvhT"
#      DIN_AUTH_JWT_CLIENT_ID: "7E13BB47-81F1-4479-8421-772E5F7802D2"
#      DIN_AUTH_JWT_CLIENT_SECRET: "UlxnOPShVK2l6ovQ5mumTgihTk3DjvhT"
